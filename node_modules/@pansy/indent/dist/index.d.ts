/**
 * 每一行紧跟前导空白的插入值为多行时，保持缩进。
 *
 * @param literals 字面值
 * @param interpolations 插入值
 * @returns 返回结果
 * @example
 * ```ts
 * const text = 'hello\nworld'
 * indent`  ${text}` // => '  hello\n  world'
 * ```
 */
export declare function indent(literals: TemplateStringsArray, ...interpolations: any[]): string;
/**
 * 给文本每一行的开始加上一个前导字符串。
 *
 * @param text 要操作的文本
 * @param leadingString 前导字符串
 * @returns 返回结果
 * @example
 * ```ts
 * indent('hello\nworld', '-> ')
 * // => '-> hello\n-> world'
 * ```
 */
export declare function indent(text: string, leadingString: string): string;
/**
 * 给文本每一行的开始加上一个前导字符串，前导字符串由回调函数返回。
 *
 * @param text 要操作的文本
 * @param callback 回调函数
 * @returns 返回结果
 * @example
 * ```ts
 * indent(
 *   'hello\nworld',
 *   (lineStr, lineIndex) => `${lineIndex + 1}. `,
 * )
 * // => '1. hello\n2. world'
 * ```
 */
export declare function indent(text: string, callback: (lineString: string, lineIndex: number) => string): string;
export default function indent(literals: string | TemplateStringsArray, ...interpolations: any[]): string;
