(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('@pansy/is-array'), require('@pansy/is-function')) :
  typeof define === 'function' && define.amd ? define(['@pansy/is-array', '@pansy/is-function'], factory) :
  (global = global || self, global.indent = factory(global.isArray, global.isFunction));
}(this, (function (isArray, isFunction) { 'use strict';

  isArray = isArray && isArray.hasOwnProperty('default') ? isArray['default'] : isArray;
  isFunction = isFunction && isFunction.hasOwnProperty('default') ? isFunction['default'] : isFunction;

  function indent(literals) {
    var _arguments = arguments;
    var result = ''; // 函数模式

    if (!isArray(literals)) {
      var leadingString = arguments.length <= 1 ? undefined : arguments[1];
      var leadingStringIsFn = isFunction(leadingString);
      result = String(literals).split(/[\r\n]/g).map(function (item, index) {
        return "".concat(leadingStringIsFn ? leadingString(item, index) : leadingString).concat(item);
      }).join('\n');
      return result;
    } // 标签模板字符串模式


    var _loop = function _loop(i) {
      var literal = literals[i];
      var interpolation = i + 1 < 1 || _arguments.length <= i + 1 ? undefined : _arguments[i + 1];
      var match = i === 0 ? literal.match(/[\r\n]*(\s*)$/) : literal.match(/[\r\n]+(\s*)$/);

      if (match) {
        interpolation = String(interpolation).split(/[\r\n]/g).map(function (item, index) {
          return "".concat(index === 0 ? '' : match[1]).concat(item);
        }).join('\n');
      }

      result += literal;
      result += interpolation;
    };

    for (var i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i++) {
      _loop(i);
    }

    result += literals[literals.length - 1];
    return result;
  }

  return indent;

})));
//# sourceMappingURL=index.umd.js.map
