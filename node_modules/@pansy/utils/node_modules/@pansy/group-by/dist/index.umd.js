(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.groupBy = factory());
}(this, (function () { 'use strict';

  /**
   * 根据迭代函数返回的值对 `data` 进行分组。
   *
   * @param data 要分组的数据
   * @param iterator 迭代函数
   * @param formatter 格式化函数
   * @returns 返回分组结果
   * @example
   * ```ts
   * groupBy(
   *   [
   *     { module: 'module1', action: 'action1' },
   *     { module: 'module1', action: 'action2' },
   *     { module: 'module2', action: 'action1' }
   *   ],
   *   item => item.module,
   * )
   * // => {
   * // =>   module1: [
   * // =>     { module: 'module1', action: 'action1' },
   * // =>     { module: 'module1', action: 'action2' },
   * // =>   ],
   * // =>   module2: [
   * // =>     { module: 'module2', action: 'action1' }
   * // =>   ]
   * // => }
   * ```
   */
  function groupBy(data, iterator, formatter) {
    return data.reduce(function (res, item, index) {
      var key = iterator(item, index, data);

      if (!res[key]) {
        res[key] = [];
      }

      res[key].push(formatter ? formatter(item, index, data) : item);
      return res;
    }, {});
  }

  return groupBy;

})));
//# sourceMappingURL=index.umd.js.map
