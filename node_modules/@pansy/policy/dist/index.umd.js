(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('@pansy/is-string'), require('@pansy/is-array'), require('@pansy/group-by')) :
  typeof define === 'function' && define.amd ? define(['@pansy/is-string', '@pansy/is-array', '@pansy/group-by'], factory) :
  (global = global || self, global.policy = factory(global.isString, global.isArray, global.groupBy));
}(this, (function (isString, isArray, groupBy) { 'use strict';

  isString = isString && isString.hasOwnProperty('default') ? isString['default'] : isString;
  isArray = isArray && isArray.hasOwnProperty('default') ? isArray['default'] : isArray;
  groupBy = groupBy && groupBy.hasOwnProperty('default') ? groupBy['default'] : groupBy;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  /**
   * 解析权限策略，并提供验证功能
   *
   * @example
   * ```js
   * const policy = new Policy();
   *
   * const actions = [
   *   { module: 'module1', action: 'action1' },
   *   { module: 'module1', action: 'action2' },
   *   { module: 'module1', action: 'action3' },
   *   { module: 'module2', action: 'action1' },
   *   { module: 'module2', action: 'action2' }
   * ];
   *
   * policy.addPolicy({
   *  version: 1,
   *  statement: [
   *    {
   *      effect: 'allow',
   *      action: [
   *        'module1/*'
   *      ]
   *    }
   *  ]
   * });
   *
   * policy.singleVerify('module1/action1');
   *
   * // >> true
   * ```
   * */

  var Policy =
  /**
   * @param actions 操作集合
   * @param separator 分隔符 默认: '/'
   * */
  function Policy(actions, separator) {
    var _this = this;

    _classCallCheck(this, Policy);

    // 以module为key存储权限
    this.moduleMap = {};
    /**
     * 按照模块组织操作
     * @param actions 权限集合
     * */

    this.getModuleMap = function () {
      var actions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var moduleMap = {};

      if (actions) {
        moduleMap = groupBy(actions, function (item) {
          return item.module;
        }, function (item) {
          return "".concat(item.module).concat(_this.separator).concat(item.action);
        });
      }

      return moduleMap;
    };
    /**
     * 验证组合条件的权限
     * @param actionStr 需要验证的权限
     * @example
     * ```js
     * policy.combinationVerify('((goods/create && !goods/list) && goods/info)')
     * ```
     * */


    this.combinationVerify = function (actionStr) {
      var regStr = '([\\w|\\d|\\*]+\\/[\\w|*]+)|\\*';
      var reg = new RegExp(regStr, 'g');
      (actionStr.match(reg) || []).map(function (item) {
        var result = _this.singleVerify(item) ? 'true' : 'false';
        actionStr = actionStr.replace(new RegExp(regStr), result);
      });
      return !!eval(actionStr);
    };
    /**
     * 验证单个或多个权限
     * @param actions
     */


    this.multipleVerify = function (actions) {
      if (isString(actions)) {
        return _this.singleVerify(actions);
      }

      if (isArray(actions)) {
        for (var i = 0, len = actions.length; i < len; i++) {
          var result = _this.singleVerify(actions[i]);

          if (!result) {
            return false;
          }
        }
      }

      return true;
    };
    /**
     * 验证单个权限
     * @param action
     */


    this.singleVerify = function (action) {
      // 表示任何用户皆可以访问
      if (action === '*') {
        return true;
      } else {
        // 命中不允许使用的权限
        if (_this.denyActions.includes(action)) {
          return false;
        }

        if (_this.allowActions.includes(action)) {
          return true;
        }
      } // 默认不允许访问


      return false;
    };
    /**
     * 添加权限策略
     * @param policy
     */


    this.addPolicy = function (policy) {
      if (!policy) return;
      var statement = policy.statement; // 解析授权语句

      if (statement && statement.length) {
        statement.forEach(function (item) {
          var effect = item.effect,
              action = item.action;
          var actions = [];

          if (isString(action)) {
            actions = _this.parseAction(action);
          }

          if (isArray(action)) {
            action.forEach(function (item) {
              actions = actions.concat(_this.parseAction(item));
            });
          } // 允许


          if (effect === 'allow') {
            var actionList = _this.allowActions.concat(actions);

            _this.allowActions = _toConsumableArray(new Set(actionList));
            return;
          } // 禁止


          if (effect === 'deny') {
            var _actionList = _this.denyActions.concat(actions);

            _this.denyActions = _toConsumableArray(new Set(_actionList));
            return;
          }
        });
      }
    };
    /**
     * 解析权限
     * @param action
     */


    this.parseAction = function (action) {
      var actions = _this.getAllAction();

      var result = [];

      if (action === '*') {
        result = actions;
      } else {
        var list = action.split(_this.separator);

        if (list.length === 2) {
          var moduleName = list[0];
          var actionName = list[1];

          if (actionName === '*') {
            actions.length && (result = _this.moduleMap[moduleName] || []);
          } else {
            result = [action];
          }
        }
      }

      return result;
    };
    /**
     * 获取所有的Action
     */


    this.getAllAction = function () {
      var actions = [];
      var modules = Object.keys(_this.moduleMap);
      modules.forEach(function (key) {
        actions = actions.concat(_this.moduleMap[key]);
      });
      return actions;
    }; // 分隔符自定义


    this.separator = separator || '/'; // 模块的操作集合

    this.moduleMap = this.getModuleMap(actions); // 允许的操作

    this.allowActions = []; // 拒绝的操作

    this.denyActions = [];
  };

  return Policy;

})));
//# sourceMappingURL=index.umd.js.map
