/**
 * 解析后的操作集合
 *
 * @example
 * ```js
 * const actions = {
 *   'module1': [
 *     'module1/action1',
 *     'module1/action2'
*     ]
 * }
 * ```
 */
export interface ModuleAction {
    [module: string]: string[];
}
/**
 * 操作类型 (可理解为权限)
 *
 * @example
 * ```
 * { module: 'module1', action: 'action1' }
 * ```
 */
export interface Action {
    module: string;
    action: string;
}
/**
 * 授权语句
 */
export interface Statement {
    /** 授权效力 allow: 允许 deny: 禁止 */
    effect: 'allow' | 'deny';
    /**
     * 操作列表
     *
     * 1. `*` 表示所有
     * 2. `module/*` 表示`module`模块所有
     * */
    action: '*' | string[];
}
/**
 * 权限策略
 */
export interface IPolicyData {
    /** 该权限策略版本 */
    version: number;
    /** 授权语句集合 */
    statement: Statement[];
}
/**
 * 解析权限策略，并提供验证功能
 *
 * @example
 * ```js
 * const policy = new Policy();
 *
 * const actions = [
 *   { module: 'module1', action: 'action1' },
 *   { module: 'module1', action: 'action2' },
 *   { module: 'module1', action: 'action3' },
 *   { module: 'module2', action: 'action1' },
 *   { module: 'module2', action: 'action2' }
 * ];
 *
 * policy.addPolicy({
 *  version: 1,
 *  statement: [
 *    {
 *      effect: 'allow',
 *      action: [
 *        'module1/*'
 *      ]
 *    }
 *  ]
 * });
 *
 * policy.singleVerify('module1/action1');
 *
 * // >> true
 * ```
 * */
export default class Policy {
    private readonly separator;
    moduleMap: ModuleAction;
    allowActions: string[];
    denyActions: string[];
    /**
     * @param actions 操作集合
     * @param separator 分隔符 默认: '/'
     * */
    constructor(actions: Action[], separator?: string);
    /**
     * 按照模块组织操作
     * @param actions 权限集合
     * */
    private getModuleMap;
    /**
     * 验证组合条件的权限
     * @param actionStr 需要验证的权限
     * @example
     * ```js
     * policy.combinationVerify('((goods/create && !goods/list) && goods/info)')
     * ```
     * */
    combinationVerify: (actionStr: string) => boolean;
    /**
     * 验证单个或多个权限
     * @param actions
     */
    multipleVerify: (actions: string | string[]) => boolean;
    /**
     * 验证单个权限
     * @param action
     */
    singleVerify: (action: string) => boolean;
    /**
     * 添加权限策略
     * @param policy
     */
    addPolicy: (policy: IPolicyData) => void;
    /**
     * 解析权限
     * @param action
     */
    private parseAction;
    /**
     * 获取所有的Action
     */
    private getAllAction;
}
