export type TPartialDeep<T> = {
  [P in keyof T]?: TPartialDeep<T[P]>;
};

// 属性名称
export type TPropertyName = string | number | symbol;
export type TList<T> = ArrayLike<T>;
export type TIteratorShorthand<T> = TPropertyName | [TPropertyName, any] | TPartialDeep<T>;
export type TValueIteratorCustom<T, TResult> = ((value: T) => TResult) | TIteratorShorthand<T>;

export interface TDictionary<T> {
  [index: string]: T;
}


