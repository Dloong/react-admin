/**
 * 检查`value`是否为`array`。
 *
 * @since 0.0.6
 *
 * @param value
 * @returns {boolean}
 *
 * @example
 *
 * isArray([])
 * // => true
 *
 * isArray([1, 2, 3])
 * // => true
 */
function isArray(value) {
  return Array.isArray(value) || value instanceof Array;
}

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function isObject(value) {
  var type = _typeof(value);

  return value != null && (type === 'object' || type === 'function');
}

/**
 * 深拷贝
 * @param data
 */

function deepClone(data) {
  if (isArray(data)) {
    return data.map(deepClone);
  } else if (isObject(data)) {
    return Object.keys(data).reduce(function (o, k) {
      o[k] = deepClone(data[k]);
      return o;
    }, {});
  } else {
    return data;
  }
}

function groupBy(data, iterator) {
  return data.reduce(function (res, item, index) {
    var key = iterator(item, index, data);

    if (!res[key]) {
      res[key] = [];
    }

    res[key].push(item);
    return res;
  }, {});
}

function createTree(array, rootNodes, customID, childrenProperty) {
  var tree = [];

  for (var rootNode in rootNodes) {
    var node = rootNodes[rootNode];
    var childNode = array[node[customID]];

    if (!node && !rootNodes.hasOwnProperty(rootNode)) {
      continue;
    }

    if (childNode) {
      node[childrenProperty] = createTree(array, childNode, customID, childrenProperty);
    }

    tree.push(node);
  }

  return tree;
}

function groupByParents(array, options) {
  var arrayByID = groupBy(array, function (item) {
    return item[options.customID];
  });
  return array.reduce(function (prev, item) {
    var parentID = item[options.parentProperty];

    if (!arrayByID.hasOwnProperty(parentID)) {
      parentID = options.rootID;
    }

    if (prev.hasOwnProperty(parentID)) {
      prev[parentID].push(item);
      return prev;
    }

    prev[parentID] = [item];
    return prev;
  }, {});
}
/**
 * 将数组转换为树形结构数据
 *
 * @since 0.0.6
 *
 * @param list
 * @param options
 *
 * @example
 *
 */


function arrayToTree(list, options) {
  // 默认配置
  var defaultOptions = {
    parentProperty: 'parentId',
    childrenProperty: 'children',
    customID: 'id',
    rootID: 0
  };
  options = Object.assign(defaultOptions, options);

  if (!isArray(list)) {
    throw new TypeError('期望一个数组，但得到的是一个无效参数');
  }

  var grouped = groupByParents(deepClone(list), options);
  return createTree(grouped, grouped[options.rootID], options.customID, options.childrenProperty);
}

/**
 * 检查`value`是否为`boolean`。
 *
 * @since 0.0.6
 *
 * @param value
 * @returns {boolean}
 *
 * @example
 *
 * isBoolean(true)
 * // => true
 *
 * isBoolean([1, 2, 3])
 * // => false
 */
function isBoolean(value) {
  return typeof value === 'boolean';
}

// 常用正则
var emailRegexp = /\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/;
var idCardRegexp = /(^[1-9]\d{5}(18|19|([23]\d))\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$)|(^[1-9]\d{5}\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{2}[0-9Xx]$)/;
var phoneRegexp = /^(\+?0?86\-?)?1[3-9]\d{9}$/;
var urlRegex = /[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/i;

/**
 * 检查`value`是否为邮箱。
 *
 * @since 0.0.6
 *
 * @param value
 * @returns {boolean}
 *
 * @example
 *
 * isEmail('156148999@qq.com')
 * // => true
 *
 * isEmail('wang_xingkang@qq.com')
 * // => true
 */

function isEmail(value) {
  return emailRegexp.test(value);
}

function isIdCard(value) {
  return idCardRegexp.test(value);
}

/**
 * 检查`value`是否为`NaN`。
 *
 * @since 0.0.6
 *
 * @param value
 * @returns {boolean}
 *
 * @example
 *
 * isNaN(NaN)
 * // => true
 *
 * isNull(1)
 * // => false
 */
function isNaN(value) {
  return value !== value;
}

/**
 * 检查`value`是否为`null`。
 *
 * @since 0.0.6
 *
 * @param value
 * @returns {boolean}
 *
 * @example
 *
 * isNull(null)
 * // => true
 *
 * isNull(void 0)
 * // => false
 */
function isNull(value) {
  return value === null;
}

/**
 * 检查`value`是否为`number`。
 *
 * @since 0.0.6
 *
 * @param value
 * @returns {boolean}
 *
 * @example
 *
 * isNumber(1)
 * // => true
 *
 * isNumber(Number.MIN_VALUE)
 * // => true
 */
function isNumber(value) {
  return typeof value === 'number';
}

/**
 * 检查`value`是否为手机号。
 *
 * @since 0.0.6
 *
 * @param value
 * @returns {boolean}
 *
 * @example
 *
 * isPhone('17710067607')
 * // => true
 *
 * isBoolean('11710067607')
 * // => false
 */

function isPhone(value) {
  return phoneRegexp.test(value);
}

/**
 * 检查`value`是否为`Promise`。
 *
 * @since 0.0.6
 *
 * @param value
 * @returns {boolean}
 *
 * @example
 *
 * isPromise(null)
 * // => false
 *
 * isPromise(0)
 * // => false
 */
function isPromise(value) {
  return !!value && (_typeof(value) === 'object' || typeof value === 'function') && typeof value.then === 'function';
}

/**
 * 检查`value`是否为`string`。
 *
 * @since 0.0.6
 *
 * @param value
 * @returns {boolean}
 *
 * @example
 *
 * isString('')
 * // => true
 *
 * isString('string')
 * // => true
 */
function isString(value) {
  return typeof value === 'string';
}

/**
 * 检查`value`是否为`undefined`。
 *
 * @since 0.0.6
 *
 * @param value
 * @returns {boolean}
 *
 * @example
 *
 * isUndefined(undefined)
 * // => true
 *
 * isUndefined(null)
 * // => false
 */
function isUndefined(value) {
  return value === undefined;
}

function isUrl(value) {
  return urlRegex.test(value);
}

var digits = ['零', '一', '二', '三', '四', '五', '六', '七', '八', '九']; // 节权位集合

var unitSections = ['', '万', '亿', '万亿', '亿亿']; // 节内权位集合

var unitChars = ['', '十', '百', '千'];
var point = "点"; // 每小节转换方法

function sectionToChinese(section) {
  var result = '';
  var count = 0;
  var str = '';

  while (section > 0) {
    var value = section % 10;

    if (value === 0) ; else {
      str = digits[value];
      str += unitChars[count];
      result = str + result;
    }

    count++;
    section = Math.floor(section / 10);
  }

  return result;
}

function floatToChinese(number) {
  var index = number.toString().indexOf('.');

  if (index !== -1) {
    var floatStr = number.toString().slice(index);
    var result = '';

    for (var i = 1; i < floatStr.length; i++) {
      result += digits[parseInt(floatStr[i])];
    }

    return point + result;
  } else {
    return '';
  }
}

function intToChinese(number) {
  if (number === 0) return digits[0];
  var unitPos = 0;
  var result = '';
  var chnStr = '';
  var needZero = false;

  while (number > 0) {
    var section = number % 10000;

    if (needZero) {
      chnStr = digits[0] + chnStr;
    }

    chnStr = sectionToChinese(section);
    chnStr += section !== 0 ? unitSections[unitPos] : unitSections[0];
    result = chnStr + result;
    needZero = section < 1000 && section > 0;
    number = Math.floor(number / 10000);
    unitPos++;
  }

  return result;
}

function numberToChinese(number) {
  if (!isNumber(number)) {
    return number.toString();
  }

  var int = Math.floor(number);
  var floatChinese = floatToChinese(number);
  var intChinese = intToChinese(int);
  return intChinese + floatChinese;
}

/**
 * 转换url为数组
 *
 * @since 0.0.5
 *
 * @param url string
 * @returns {string[]}
 *
 * @example
 *
 * urlToList(test)
 * // => ['/test']
 *
 * urlToList(/admin/user)
 * // => ['/test', '/test/user']
 */
function urlToList(url) {
  var urlList = url.split('/').filter(function (i) {
    return i;
  });
  return urlList.map(function (urlItem, index) {
    return "/".concat(urlList.slice(0, index + 1).join('/'));
  });
}

export { arrayToTree, deepClone, emailRegexp, groupBy, idCardRegexp, isArray, isBoolean, isEmail, isIdCard, isNaN, isNull, isNumber, isObject, isPhone, isPromise, isString, isUndefined, isUrl, numberToChinese, phoneRegexp, urlRegex, urlToList };
