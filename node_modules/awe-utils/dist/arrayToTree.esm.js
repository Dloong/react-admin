/**
 * 检查`value`是否为`array`。
 *
 * @since 0.0.6
 *
 * @param value
 * @returns {boolean}
 *
 * @example
 *
 * isArray([])
 * // => true
 *
 * isArray([1, 2, 3])
 * // => true
 */
function isArray(value) {
  return Array.isArray(value) || value instanceof Array;
}

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function isObject(value) {
  var type = _typeof(value);

  return value != null && (type === 'object' || type === 'function');
}

/**
 * 深拷贝
 * @param data
 */

function deepClone(data) {
  if (isArray(data)) {
    return data.map(deepClone);
  } else if (isObject(data)) {
    return Object.keys(data).reduce(function (o, k) {
      o[k] = deepClone(data[k]);
      return o;
    }, {});
  } else {
    return data;
  }
}

function groupBy(data, iterator) {
  return data.reduce(function (res, item, index) {
    var key = iterator(item, index, data);

    if (!res[key]) {
      res[key] = [];
    }

    res[key].push(item);
    return res;
  }, {});
}

function createTree(array, rootNodes, customID, childrenProperty) {
  var tree = [];

  for (var rootNode in rootNodes) {
    var node = rootNodes[rootNode];
    var childNode = array[node[customID]];

    if (!node && !rootNodes.hasOwnProperty(rootNode)) {
      continue;
    }

    if (childNode) {
      node[childrenProperty] = createTree(array, childNode, customID, childrenProperty);
    }

    tree.push(node);
  }

  return tree;
}

function groupByParents(array, options) {
  var arrayByID = groupBy(array, function (item) {
    return item[options.customID];
  });
  return array.reduce(function (prev, item) {
    var parentID = item[options.parentProperty];

    if (!arrayByID.hasOwnProperty(parentID)) {
      parentID = options.rootID;
    }

    if (prev.hasOwnProperty(parentID)) {
      prev[parentID].push(item);
      return prev;
    }

    prev[parentID] = [item];
    return prev;
  }, {});
}
/**
 * 将数组转换为树形结构数据
 *
 * @since 0.0.6
 *
 * @param list
 * @param options
 *
 * @example
 *
 */


function arrayToTree(list, options) {
  // 默认配置
  var defaultOptions = {
    parentProperty: 'parentId',
    childrenProperty: 'children',
    customID: 'id',
    rootID: 0
  };
  options = Object.assign(defaultOptions, options);

  if (!isArray(list)) {
    throw new TypeError('期望一个数组，但得到的是一个无效参数');
  }

  var grouped = groupByParents(deepClone(list), options);
  return createTree(grouped, grouped[options.rootID], options.customID, options.childrenProperty);
}

export { arrayToTree };
