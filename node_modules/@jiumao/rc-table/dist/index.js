'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('antd/lib/table/style');
var _Table = _interopDefault(require('antd/lib/table'));
var React = _interopDefault(require('react'));
var classNames = _interopDefault(require('classnames'));

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = "/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */\n/* stylelint-disable no-duplicate-selectors */\n/* stylelint-disable */\n/* stylelint-disable declaration-bang-space-before,no-duplicate-selectors,string-no-newline */\n.rc-table .ant-table-pagination {\n  margin-top: 24px;\n}\n";
styleInject(css);

var prefixCls = 'rc-table';

var RcTable = function RcTable(props) {
  var className = props.className,
      style = props.style,
      rowKey = props.rowKey,
      data = props.data,
      onChange = props.onChange,
      restProps = _objectWithoutProperties(props, ["className", "style", "rowKey", "data", "onChange"]);

  var _data$list = data.list,
      list = _data$list === void 0 ? [] : _data$list,
      pagination = data.pagination;

  var handleTableChange = function handleTableChange(pagination, filters, sorter) {
    onChange && onChange(pagination, filters, sorter);
  };

  var paginationProps = _objectSpread({
    showSizeChanger: true,
    showQuickJumper: true
  }, pagination);

  return React.createElement("div", {
    className: classNames(className, _defineProperty({}, "".concat(prefixCls), true)),
    style: style
  }, React.createElement(_Table, Object.assign({
    rowKey: rowKey,
    dataSource: list,
    pagination: paginationProps,
    onChange: handleTableChange
  }, restProps)));
};

RcTable.defaultProps = {
  rowKey: 'id',
  size: 'middle'
};

module.exports = RcTable;
