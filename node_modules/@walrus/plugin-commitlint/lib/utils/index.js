"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkFromHistory = checkFromHistory;
exports.checkFromEdit = checkFromEdit;
exports.checkFromRepository = checkFromRepository;
exports.checkFromStdin = checkFromStdin;
exports.getSeed = getSeed;
exports.selectParserOpts = selectParserOpts;
exports.loadFormatter = loadFormatter;

var _sharedUtils = require("@walrus/shared-utils");

const resolveFrom = require('resolve-from');

const resolveGlobal = require('resolve-global');
/**
 * 是否从历史中检查
 * @param opts
 */


function checkFromHistory(opts) {
  return _sharedUtils._.isString(opts.from) || _sharedUtils._.isString(opts.to);
}
/**
 * 是否从编辑中检查
 * @param opts
 */


function checkFromEdit(opts) {
  return Boolean(opts.edit) || opts.env;
}
/**
 * 是否从存储库中建议
 * @param opts
 */


function checkFromRepository(opts) {
  return checkFromHistory(opts) || checkFromEdit(opts);
}
/**
 * 是否检查Stdin
 * @param input
 * @param opts
 */


function checkFromStdin(input, opts) {
  return input.length === 0 && !checkFromRepository(opts);
}

function getSeed(seed) {
  const e = Array.isArray(seed.extends) ? seed.extends : [seed.extends];
  const n = e.filter(i => typeof i === 'string');
  return n.length > 0 ? {
    extends: n,
    parserPreset: seed.parserPreset
  } : {
    parserPreset: seed.parserPreset
  };
}

function selectParserOpts(parserPreset) {
  if (typeof parserPreset !== 'object') {
    return undefined;
  }

  if (typeof parserPreset.parserOpts !== 'object') {
    return undefined;
  }

  return parserPreset.parserOpts;
}

function loadFormatter(config, flags) {
  const moduleName = flags.format || config.formatter || '@commitlint/format';
  const modulePath = resolveFrom.silent(__dirname, moduleName) || resolveFrom.silent(flags.cwd, moduleName) || resolveGlobal.silent(moduleName);

  if (modulePath) {
    const moduleInstance = require(modulePath);

    if (_sharedUtils._.isFunction(moduleInstance.default)) {
      return moduleInstance.default;
    }

    return moduleInstance;
  }

  throw new Error(`Using format ${moduleName}, but cannot find the module.`);
}