"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = require("fs");

var prettier = _interopRequireWildcard(require("prettier"));

var _path = require("path");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const processFiles = (directory, files, opts = {}) => {
  const check = opts.check,
        config = opts.config,
        onExamineFile = opts.onExamineFile,
        onCheckFile = opts.onCheckFile,
        onWriteFile = opts.onWriteFile;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      const relative = _step.value;
      onExamineFile && onExamineFile(relative);
      const file = (0, _path.join)(directory, relative);
      const options = Object.assign({}, prettier.resolveConfig.sync(file, {
        config,
        editorconfig: true
      }), {
        filepath: file
      });
      const input = (0, _fs.readFileSync)(file, 'utf8');

      if (check) {
        const isFormatted = prettier.check(input, options);
        onCheckFile && onCheckFile(relative, isFormatted);
        continue;
      }

      const output = prettier.format(input, options);

      if (output !== input) {
        (0, _fs.writeFileSync)(file, output);
        onWriteFile && onWriteFile(relative);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

var _default = processFiles;
exports.default = _default;