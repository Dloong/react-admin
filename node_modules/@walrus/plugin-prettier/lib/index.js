"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sharedUtils = require("@walrus/shared-utils");

var _prettier = _interopRequireDefault(require("./prettier"));

var _defaultConfig = _interopRequireDefault(require("./default-config"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(api, config) {
  api.registerCommand('prettier', {
    description: 'prettier source files',
    usage: 'walrus prettier [opts] [filename ...]',
    options: {
      '--staged': 'Pre-commit mode. Under this flag only staged files will be formatted, and they will be re-staged after formatting.',
      '--no-restage': 'Use with the `--staged` flag to skip re-staging files after formatting.',
      '--branch': 'When not in `staged` pre-commit mode, use this flag to compare changes with the specified branch. Defaults to `master` (git) / `default` (hg) branch.',
      '--pattern': 'Filters the files for the given [minimatch](https://github.com/isaacs/minimatch) pattern.',
      '--verbose': `Outputs the name of each file right before it is proccessed. This can be useful if Prettier throws an error and you can't identify which file is causing the problem.`,
      '--bail': 'Prevent `git commit` if any files are fixed.',
      '--check': `Check that files are correctly formatted, but don't format them. This is useful on CI to verify that all changed files in the current branch were correctly formatted.`,
      '--config': 'Path to a prettier config file.'
    },
    details: 'For more options, see https://prettier.io/docs/en/options.html'
  }, (args, rawArgs, opts = {}) => {
    const cwd = api.getCwd();
    const prettyQuickResult = (0, _prettier.default)(cwd, Object.assign(_defaultConfig.default, opts, args, {
      onFoundSinceRevision: (scm, revision) => {
        console.log(`üîç  Finding changed files since ${_sharedUtils.chalk.bold(scm)} revision ${_sharedUtils.chalk.bold(revision)}.`);
      },
      onFoundChangedFiles: changedFiles => {
        console.log(`üéØ  Found ${_sharedUtils.chalk.bold(changedFiles.length)} changed ${changedFiles.length === 1 ? 'file' : 'files'}.`);
      },
      onPartiallyStagedFile: file => {
        console.log(`‚úó Found ${_sharedUtils.chalk.bold('partially')} staged file ${file}.`);
      },
      onWriteFile: file => {
        console.log(`‚úçÔ∏è  Fixing up ${_sharedUtils.chalk.bold(file)}.`);
      },
      onCheckFile: (file, isFormatted) => {
        if (!isFormatted) {
          console.log(`‚õîÔ∏è  Check failed: ${_sharedUtils.chalk.bold(file)}`);
        }
      },
      onExamineFile: file => {
        console.log(`üîç  Examining ${_sharedUtils.chalk.bold(file)}.`);
      }
    }));

    if (prettyQuickResult.success) {
      console.log('‚úÖ  Everything is awesome!');
    } else {
      if (prettyQuickResult.errors.indexOf('PARTIALLY_STAGED_FILE') !== -1) {
        console.log('‚úó Partially staged files were fixed up.' + ` ${_sharedUtils.chalk.bold('Please update stage before committing')}.`);
      }

      if (prettyQuickResult.errors.indexOf('BAIL_ON_WRITE') !== -1) {
        console.log('‚úó File had to be prettified and prettyQuick was set to bail mode.');
      }

      if (prettyQuickResult.errors.indexOf('CHECK_FAILED') !== -1) {
        console.log('‚úó Code style issues found in the above file(s). Forgot to run Prettier?');
      }

      process.exit(1);
    }
  });
}