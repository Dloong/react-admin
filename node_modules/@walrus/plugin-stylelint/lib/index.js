#!/usr/bin/env node
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sharedUtils = require("@walrus/shared-utils");

var _stylelint = _interopRequireDefault(require("stylelint"));

var _stylelintConfig = _interopRequireDefault(require("./config/stylelint.config.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _default(api) {
  api.registerCommand('stylelint', {
    description: 'lint your style code',
    usage: 'walrus stylelint [options] [...files]',
    options: {
      '--fix': 'Automatically fix violations of certain rules.',
      '--syntax': 'Specify a syntax. Options.'
    },
    details: 'For more options, see https://github.com/stylelint/stylelint/blob/master/docs/user-guide/cli.md'
  }, args => {
    _stylelint.default.lint(_objectSpread({
      config: _stylelintConfig.default,
      files: args._
    }, args)).then(function (data) {
      // do things with data.output, data.errored,
      // and data.results
      const output = data.output;
      const outputParsed = JSON.parse(output);
      outputParsed && outputParsed.forEach(function (o) {
        const source = o.source,
              warnings = o.warnings;
        console.error(_sharedUtils.chalk.red(source));
        warnings && warnings.forEach(function (w) {
          const line = w.line,
                column = w.column,
                rule = w.rule,
                text = w.text;
          console.error(_sharedUtils.chalk.red(`${line}:${column}   ${text}`));
        });
        console.error('');
      });
    }).catch(function (err) {
      // do things with err e.g.
      console.error(_sharedUtils.chalk.red(err.stack));
    });
  });
}