import { readPkg } from '@walrus/shared-utils';
import { CommandOpts, CommandFun, RawArgs, Config, Args } from '@walrus/types';
import helpCommand from './commands/help';
import PluginAPI, { PluginConfig } from './pluginAPI';
export interface Commands {
    [name: string]: {
        fn: CommandFun;
        opts: CommandOpts;
        config: PluginConfig;
    };
}
export declare type ApplyFun = (pluginAPI: PluginAPI, config: Config) => void;
export interface Plugin {
    id: string;
    apply: {
        default?: ApplyFun;
        defaultModes?: {
            [key: string]: string;
        };
    };
    opts?: {
        [key: string]: any;
    };
}
declare class Service {
    private initialized;
    context: string;
    config: Config;
    plugins: Plugin[];
    pkg: readPkg.PackageJson;
    walrusCliPkg: readPkg.PackageJson;
    private pluginResolution;
    commands: Commands;
    modes: {
        [key: string]: string;
    };
    constructor(context?: string, config?: Config);
    /**
     * 获取用户配置
     */
    loadUserOptions(): Config;
    normalizeConfig: (config: Config) => Config;
    /**
     * 解析插件
     */
    resolvePlugins(): Promise<{
        id: any;
        apply: typeof helpCommand;
    }[]>;
    getPlugin: (name: string) => any;
    localRequire(name: string, { silent, cwd }?: {
        silent?: boolean;
        cwd?: string;
    }): any;
    /**
     * 解析package.json
     *
     * @param context 当前工作目录
     * @return 返回解析后的Json对象
     */
    resolvePkg(context?: string): {};
    init(): Promise<void>;
    run(name: string, args?: Args, rawArgv?: RawArgs): Promise<any>;
}
export default Service;
