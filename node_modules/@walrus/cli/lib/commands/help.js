"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sharedUtils = require("@walrus/shared-utils");

var _getPadLength = _interopRequireDefault(require("../utils/getPadLength"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _default(api) {
  api.registerCommand('help', args => {
    const commandName = args._[0];

    if (!commandName) {
      logMainHelp();
    } else {
      logHelpForCommand(commandName, api.service.commands[commandName]);
    }
  });

  function logMainHelp() {
    console.log(`\n  Usage: walrus <command> [options]\n` + `\n  Commands:\n`);
    const commands = api.service.commands;
    const padLength = (0, _getPadLength.default)(commands);

    for (const name in commands) {
      if (name !== 'help') {
        const opts = commands[name].opts || {};
        console.log(`    ${_sharedUtils.chalk.blue(name.padEnd(padLength))}${opts.description || ''}`);
      }
    }

    console.log(`\n  run ${_sharedUtils.chalk.green(`walrus help [command]`)} for usage of a specific command.\n`);
  }

  function logHelpForCommand(name, command) {
    if (!command) {
      console.log(_sharedUtils.chalk.red(`\n  command "${name}" does not exist.`));
    } else {
      const opts = command.opts || {};

      if (opts.usage) {
        console.log(`\n  Usage: ${opts.usage}`);
      }

      if (opts.options) {
        console.log(`\n  Options:\n`);
        const padLength = (0, _getPadLength.default)(opts.options);

        for (var _i = 0, _Object$entries = Object.entries(opts.options); _i < _Object$entries.length; _i++) {
          const _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
                flags = _Object$entries$_i[0],
                description = _Object$entries$_i[1];

          console.log(`    ${_sharedUtils.chalk.blue(flags.padEnd(padLength))}${description}`);
        }
      }

      if (opts.details) {
        console.log();
        console.log(opts.details.split('\n').map(line => `  ${line}`).join('\n'));
      }

      console.log();
    }
  }
}