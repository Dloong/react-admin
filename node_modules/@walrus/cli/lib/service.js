"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = require("fs");

var _path = require("path");

var _sharedUtils = require("@walrus/shared-utils");

var _help = _interopRequireDefault(require("./commands/help"));

var _custom = _interopRequireDefault(require("./custom"));

var _pluginAPI = _interopRequireDefault(require("./pluginAPI"));

var _config = require("./config");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const merge = _sharedUtils._.merge;

const resolveFrom = require('resolve-from');

function getInteriorPluginId(id) {
  return id.replace(/^.\//, 'built-in:');
}
/**
 * 解析walrus-cli的package.json
 */


function resolveWalrusCliPkg() {
  return _sharedUtils.readPkg.sync({
    cwd: (0, _path.join)(__dirname, '..')
  });
}

class Service {
  constructor(context = process.cwd(), config) {
    this.normalizeConfig = config => {
      const userConfig = this.loadUserOptions();
      const result = merge({}, userConfig, config, {
        frame: config.frame || userConfig.frame || 'react',
        useTS: config.useTS || userConfig.useTS || true,
        target: config.target || userConfig.target || 'browser'
      });
      result.plugins = result.plugins || {};
      return result;
    };

    this.getPlugin = name => {
      // 是否是@walrus/plugin-*形式的内置包
      const isOfficialBuiltIn = require('../package').dependencies[`@walrus/plugin-${name}`]; // 是否是walrus-plugin-*形式的内置包


      const isBuiltIn = require('../package').dependencies[`walrus-plugin-${name}`];

      let plugin = null; // 内置插件

      if (isOfficialBuiltIn) {
        return require(`@walrus/plugin-${name}`);
      }

      if (isBuiltIn) {
        return require(`walrus-plugin-${name}`);
      } // 用户安装官方插件


      if (this.pkg.dependencies && this.pkg.dependencies[`@walrus/plugin-${name}`] || this.pkg.devDependencies && this.pkg.devDependencies[`@walrus/plugin-${name}`]) {
        return require(`@walrus/plugin-${name}`);
      }

      if (!plugin) {
        plugin = this.localRequire(`walrus-plugin-${name}`);
      }

      if (!plugin && name.charAt(0) === '@') {
        plugin = this.localRequire(name);
      }

      if (plugin) {
        return plugin;
      } else {
        _custom.default.warn(`Optional dependency ${name} is not installed.`);

        return null;
      }
    };

    this.commands = {};
    this.context = context;
    this.pluginResolution = new _sharedUtils.PluginResolution('walrus');
    this.pkg = this.resolvePkg();
    this.config = this.normalizeConfig(config || {});
    this.walrusCliPkg = resolveWalrusCliPkg();
    this.initialized = false;
  }
  /**
   * 获取用户配置
   */


  loadUserOptions() {
    this.context = this.context || process.cwd(); // 根据配置依次读取配置文件

    const userConfig = _sharedUtils.configLoader.loadSync(_config.DEFAULT_CONFIG_FILENAMES, this.context);

    return userConfig.data || {};
  }
  /**
   * 解析插件
   */


  resolvePlugins() {
    var _this = this;

    return _asyncToGenerator(function* () {
      const pluginsOptions = {
        eslint: _this.config.plugins.eslint !== false && merge({}, _this.config.plugins.eslint),
        commitlint: _this.config.plugins.commitlint !== false && merge({}, _this.config.plugins.commitlint),
        jest: _this.config.plugins.jest !== false && merge({}, _this.config.plugins.jest),
        prettier: _this.config.plugins.jest !== false && merge({}, _this.config.plugins.prettier),
        stylelint: _this.config.plugins.stylelint !== false && merge({}, _this.config.plugins.stylelint)
      }; // 内置插件

      const builtInPlugins = [{
        id: getInteriorPluginId('./commands/help'),
        apply: _help.default
      }];

      for (var _i = 0, _Object$keys = Object.keys(_this.config.plugins); _i < _Object$keys.length; _i++) {
        const name = _Object$keys[_i];

        if (pluginsOptions[name] === undefined) {
          Object.assign(pluginsOptions, {
            [name]: _this.config.plugins[name]
          });
        }
      }

      const plugins = yield Promise.all(Object.keys(pluginsOptions).filter(name => pluginsOptions[name]).map(
      /*#__PURE__*/
      function () {
        var _ref = _asyncToGenerator(function* (name) {
          let plugin = yield _this.getPlugin(name);
          if (!plugin) return null;

          if (!plugin.default) {
            plugin = {
              default: plugin
            };
          }

          return {
            id: _this.pluginResolution.resolvePluginId(name),
            apply: plugin,
            opts: pluginsOptions[name] || {}
          };
        });

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }())); // 需要导入的插件

      if (_sharedUtils._.isArray(_this.config.resolvePlugins)) {
        _this.config.resolvePlugins.forEach(item => {
          if (_sharedUtils._.isString(item)) {
            plugins.push({
              id: getInteriorPluginId(_sharedUtils._.uniqueId('plugin')),
              apply: require(item),
              opts: {}
            });
          }

          if (_sharedUtils._.isArray(item)) {
            plugins.push({
              id: getInteriorPluginId(_sharedUtils._.uniqueId('plugin')),
              apply: require(item[0]),
              opts: item[1] || {}
            });
          }
        });
      }

      return builtInPlugins.concat(plugins).filter(_ => _);
    })();
  }

  localRequire(name, {
    silent,
    cwd
  } = {}) {
    cwd = cwd || this.context;
    const resolved = silent ? resolveFrom.silent(cwd, name) : resolveFrom(cwd, name);
    return resolved && require(resolved);
  }
  /**
   * 解析package.json
   *
   * @param context 当前工作目录
   * @return 返回解析后的Json对象
   */


  resolvePkg(context = this.context) {
    if ((0, _fs.existsSync)((0, _path.join)(context, 'package.json'))) {
      return _sharedUtils.readPkg.sync({
        cwd: context
      });
    } else {
      return {};
    }
  }

  init() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      if (_this2.initialized) {
        return;
      }

      _this2.initialized = true;
      _this2.plugins = yield _this2.resolvePlugins();
      _this2.modes = _this2.plugins.reduce((modes, {
        apply: {
          defaultModes
        }
      }) => {
        return Object.assign(modes, defaultModes);
      }, {});
      (0, _sharedUtils.debug)('walrus:project-config')(_this2.config); // apply plugins.

      _this2.plugins.forEach(({
        id,
        apply,
        opts
      }) => {
        if (_sharedUtils._.isFunction(apply)) {
          apply(new _pluginAPI.default(id, _this2, opts), _this2.config);
        } else {
          apply.default(new _pluginAPI.default(id, _this2, opts), _this2.config);
        }
      });
    })();
  }

  run(name, args = {}, rawArgv = []) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      yield _this3.init();
      args._ = args._ || [];
      let command = _this3.commands[name];

      if (!command && name) {
        _custom.default.error(`command "${name}" does not exist.`);

        process.exit(1);
      }

      if (!command || args.help || args.h) {
        command = _this3.commands.help;
      } else {
        args._.shift(); // remove command itself


        rawArgv.shift();
      }

      const _command = command,
            fn = _command.fn,
            config = _command.config;

      if (_sharedUtils._.isFunction(fn)) {
        return fn(args, rawArgv, config);
      }

      if (_sharedUtils._.isObject(fn)) {
        // @ts-ignore
        return fn.default(args, rawArgv, config);
      }
    })();
  }

} // @ts-ignore


var _default = Service;
exports.default = _default;