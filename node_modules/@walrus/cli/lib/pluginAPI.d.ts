import { CommandOpts, CommandFun } from '@walrus/types';
export interface PluginConfig {
    [key: string]: any;
}
declare class PluginAPI {
    private id;
    private readonly pluginConfig;
    private service;
    constructor(id: string, service: any, pluginConfig: PluginConfig);
    /**
     * 获取当前的工作目录
     */
    getCwd(): string;
    /**
     * 解决项目的路径
     *
     * @param {string} path 从项目根目录开始的相对路径
     * @return {string} 解析后的绝对路径
     */
    resolve(path: string): string;
    /**
     * 检查项目是否具有给定的插件
     * @param id
     */
    hasPlugin(id: string): boolean;
    /**
     * 注册一个作为 `walrus [name]` 的命令
     *
     * @param {string} name
     * @param {object} [opts]
     *   {
     *     description: string,
     *     usage: string,
     *     options: { [string]: string }
     *   }
     * @param {function} fn
     *   (args: { [string]: string }, rawArgs: string[]) => ?Promise
     */
    registerCommand(name: string, opts: CommandOpts, fn: CommandFun): void;
}
export default PluginAPI;
