#!/usr/bin/env node
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _path = require("path");

var eslint = _interopRequireWildcard(require("eslint"));

var _sharedUtils = require("@walrus/shared-utils");

var _cli = _interopRequireDefault(require("./cli"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const pkg = _sharedUtils.readPkg.sync({
  cwd: (0, _path.join)(__dirname, '..')
});

const options = {
  bugs: pkg.bugs.url,
  cmd: 'walrus',
  eslint,
  eslintConfig: {
    configFile: (0, _path.join)(__dirname, './config/eslintrc.base.js')
  },
  version: pkg.version
};

function _default(api, config) {
  api.registerCommand('lint', {
    description: 'lint and fix source files',
    usage: 'walrus lint [options] [...files]',
    options: {
      '--format [formatter]': 'specify formatter (default: codeframe)',
      '--no-fix': 'do not fix errors or warnings',
      '--no-fix-warnings': 'fix errors, but do not fix warnings',
      '--max-errors [limit]': 'specify number of errors to make build failed (default: 0)',
      '--max-warnings [limit]': 'specify number of warnings to make build failed (default: Infinity)'
    },
    details: 'For more options, see https://eslint.org/docs/user-guide/command-line-interface#options'
  }, () => {
    // react
    if (config.frame === 'react') {
      options.eslintConfig.configFile = (0, _path.join)(__dirname, './config/eslintrc.react.js');

      if (config.useTS) {
        options.eslintConfig.configFile = (0, _path.join)(__dirname, './config/eslintrc.react-ts.js');
      }
    } // 无框架


    if (!config.frame && config.useTS) {
      options.eslintConfig.configFile = (0, _path.join)(__dirname, './config/eslintrc.ts.js');
    }

    (0, _cli.default)(options);
  });
}