import * as eslint from 'eslint';
import { CLIEngine } from 'eslint';
export declare type IParseOpts = (opts: string, packageOpts: any, rootDir: string) => {};
interface IEslintConfig extends CLIEngine.Options {
    resolvePluginsRelativeTo?: string;
}
export interface IOptions {
    cwd?: string;
    cmd?: string;
    fix?: boolean;
    bugs?: any;
    parser?: string;
    tagline?: string;
    ignore?: string[];
    noDefaultIgnore?: boolean;
    eslint?: typeof eslint;
    plugin?: string;
    plugins?: string[];
    env?: string;
    envs?: string[];
    global?: string;
    globals?: string[];
    version?: string;
    parseOpts?: IParseOpts;
    eslintConfig?: IEslintConfig;
    usePackageJson?: boolean;
}
declare class Linter {
    private readonly cwd;
    private readonly cmd;
    private eslint;
    private customParseOpts;
    private readonly eslintConfig;
    constructor(options: IOptions);
    lintTextSync: (text: string, opts: any) => CLIEngine.LintReport;
    lintText: (text: any, opts: any, cb: any) => any;
    lintFiles: (files: string[], opts: IOptions, callback: (error: any, result?: any) => void) => any;
    /**
     * 解析配置项
     * @param opts
     */
    parseOpts: (opts: IOptions) => IOptions;
}
export default Linter;
