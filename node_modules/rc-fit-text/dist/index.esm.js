import React from 'react';

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

var nodes = new Map();
var updateQueued = false;

var FitText =
/*#__PURE__*/
function (_React$Component) {
  _inherits(FitText, _React$Component);

  function FitText() {
    var _this2;

    _classCallCheck(this, FitText);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(FitText).apply(this, arguments));

    _this2.updateElementStyle = function (element, options, width) {
      element.style.fontSize = "".concat(Math.min(Math.max(width / (options.compressor * 10), options.minFontSize), options.maxFontSize), "px");
    };

    _this2.onBodyResize = function () {
      updateQueued = true;
      var widths = [];
      nodes.forEach(function (options, element) {
        widths.push(element.offsetWidth);
      });
      var i = 0;
      nodes.forEach(function (options, element) {
        _this2.updateElementStyle(element, options, widths[i]);

        i += 1;
      });
    };

    _this2._renderChildren = function () {
      var children = _this2.props.children;

      var _this = _assertThisInitialized(_this2);

      return React.Children.map(children, function (child) {
        return React.cloneElement(child, {
          ref: function ref(c) {
            if (c) {
              nodes.set(c, _this.props);
            } // @ts-ignore


            _this._childRef = c;
          }
        });
      });
    };

    return _this2;
  }

  _createClass(FitText, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      if (!updateQueued) {
        window.requestAnimationFrame(this.onBodyResize);
      }

      window.addEventListener('resize', this.onBodyResize);
      window.addEventListener('load', this.onBodyResize);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.onBodyResize();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // @ts-ignore
      if (this._childRef) {
        // @ts-ignore
        nodes.delete(this._childRef);
      }

      window.removeEventListener('resize', this.onBodyResize);
      window.removeEventListener('load', this.onBodyResize);
    }
  }, {
    key: "render",
    value: function render() {
      return this._renderChildren()[0];
    }
  }]);

  return FitText;
}(React.Component);

FitText.defaultProps = {
  compressor: 1,
  minFontSize: Number.NEGATIVE_INFINITY,
  maxFontSize: Number.POSITIVE_INFINITY
};

export default FitText;
