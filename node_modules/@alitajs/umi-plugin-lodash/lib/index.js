"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _path = require("path");

var _utils = require("./utils/utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _default(api, options) {
  const newOptions = Object.assign({
    external: false,
    version: '',
    url: ''
  }, options);
  api.chainWebpackConfig(memo => {
    memo.resolve.alias.set('umi/lodash', (0, _path.dirname)(require.resolve('lodash/package')));

    if (newOptions.external) {
      const externals = memo.externals || {};
      memo.externals(_objectSpread({}, externals, {
        'umi/lodash': '_',
        'lodash': '_'
      }));
    }

    return memo;
  });
  api.modifyAFWebpackOpts(memo => {
    if (newOptions.external) {
      return memo;
    }

    return _objectSpread({}, memo, {
      babel: _objectSpread({}, memo.babel || {}, {
        plugins: [(0, _utils.importPlugin)('umi/lodash'), (0, _utils.importPlugin)('lodash')]
      })
    });
  });
  api.addHTMLHeadScript(() => {
    if (newOptions.external) {
      if (newOptions.url) {
        return {
          src: newOptions.url
        };
      }

      if (newOptions.version) {
        return {
          src: `https://cdnjs.cloudflare.com/ajax/libs/lodash.js/${newOptions.version}/lodash.min.js`
        };
      } else {
        throw new Error('if you need external lodash, version is required!');
      }
    }

    return [];
  });
}