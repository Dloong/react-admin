"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _fs = require("fs");

var _path = require("path");

var _lodash = require("lodash");

var _utils = require("./utils/utils");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _default(api, {
  baseURL = '/',
  exportConfig = true
}) {
  const paths = api.paths,
        config = api.config;

  if (process.env.NODE_ENV !== 'production') {
    return;
  }

  api.modifyDefaultConfig(config => {
    return _objectSpread({}, config, {
      base: '/',
      publicPath: './',
      // 使用此插件默认开启runtimePublicPath
      runtimePublicPath: true
    });
  });
  api.onBuildSuccessAsync(
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    if (exportConfig) {
      const data = (0, _fs.readFileSync)((0, _path.join)(__dirname, './templates/config.js.tpl'), 'utf-8'); // 生成config.js

      const compiled = (0, _lodash.template)(data.toString());
      const result = compiled({
        baseURL: baseURL,
        publicPath: config.publicPath
      });
      (0, _fs.writeFileSync)((0, _path.join)(paths.absOutputPath, 'config.js'), result);
    }
  }));
  api.modifyHTMLWithAST(($, {
    route,
    getChunkPath
  }) => {
    // 获取umi.js文件名称
    let umiJsPath = getChunkPath('umi.js');
    let umiCssPath = getChunkPath('umi.css');

    if (exportConfig) {
      // 插入config.js
      $('head').append(`
      <script src="${(0, _lodash.endsWith)(config.base, '/') ? config.base : config.base + '/'}config.js?t=${new Date().getTime()}"></script>
    `);
    }

    if (umiCssPath) {
      const links = $('head').find('link');

      if (links && links.length) {
        for (let i = 0; i < links.length; i++) {
          if (links[i].attribs['href'] === (0, _utils.replacePath)(umiCssPath, config.publicPath)) {
            // 删除已注入的umi.css
            $(links[i]).remove();
          }
        } // 添加umi.css的 Script


        $('head').append((0, _utils.getUmiCssScript)(umiCssPath));
      }
    }

    if (umiJsPath) {
      const scripts = $('body').find('script'); // 删除已注入umi.js

      if (scripts && scripts.length) {
        for (let i = 0; i < scripts.length; i++) {
          if (scripts[i].attribs['src'] === (0, _utils.replacePath)(umiJsPath, config.publicPath)) {
            $(scripts[i]).remove();
          }
        } // 添加umi.js的 Script


        $('body').append((0, _utils.getUmiJsScript)(umiJsPath));
      }
    }
  });
}