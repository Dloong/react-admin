import "antd/es/menu/style";
import _Menu from "antd/es/menu";
import "antd/es/dropdown/style";
import _Dropdown from "antd/es/dropdown";
import "antd/es/button/style";
import _Button from "antd/es/button";
import "antd/es/icon/style";
import _Icon from "antd/es/icon";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useState } from 'react';
import classNames from 'classnames';

var ButtonList = function ButtonList(props) {
  var _classNames;

  var prefixCls = props.prefixCls,
      className = props.className,
      style = props.style,
      _props$list = props.list,
      list = _props$list === void 0 ? [] : _props$list,
      size = props.size,
      isLink = props.isLink,
      more = props.more,
      moreType = props.moreType,
      maxCount = props.maxCount;

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      buttons = _useState2[0],
      setButtons = _useState2[1];

  var _useState3 = useState([]),
      _useState4 = _slicedToArray(_useState3, 2),
      menus = _useState4[0],
      setMenus = _useState4[1];

  React.useEffect(function () {
    if (list.length > maxCount) {
      var _buttons = list.slice(0, maxCount);

      _buttons = _buttons.map(function (item) {
        return _extends(item, {
          size: size
        });
      });
      setButtons(_buttons);
      setMenus(list.slice(maxCount));
    } else {
      setButtons(list);
    }
  }, [props.list]);

  var moreRender = function moreRender() {
    if (more) {
      return more;
    }

    if (moreType === 'text') {
      return React.createElement("span", null, "\u66F4\u591A\u64CD\u4F5C", React.createElement(_Icon, {
        type: "down"
      }));
    }

    return React.createElement("span", null, React.createElement(_Icon, {
      type: "more"
    }));
  };

  return React.createElement("div", {
    className: classNames(className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls), true), _defineProperty(_classNames, "is-link", isLink), _classNames)),
    style: style
  }, buttons.length > 0 && buttons.map(function (item, index) {
    var text = item.text,
        type = item.type,
        className = item.className,
        buttonProps = _objectWithoutProperties(item, ["text", "type", "className"]);

    return React.createElement(_Button, _extends({
      key: index
    }, buttonProps, {
      type: isLink ? 'link' : type,
      className: classNames(className, _defineProperty({}, "".concat(prefixCls, "__button-").concat(type), isLink))
    }), text);
  }), menus.length > 0 && React.createElement(_Dropdown, {
    overlay: React.createElement(_Menu, null, menus.map(function (item, index) {
      return React.createElement(_Menu.Item, {
        key: index,
        onClick: item.onClick,
        disabled: item.disabled
      }, item.text);
    }))
  }, React.createElement(_Button, {
    size: size,
    type: isLink ? 'link' : 'default'
  }, moreRender())));
};

ButtonList.defaultProps = {
  prefixCls: 'ant-plus-button-list',
  maxCount: 3,
  size: 'default',
  isLink: false,
  moreType: 'text'
};
export default ButtonList;
//# sourceMappingURL=button-list.js.map
