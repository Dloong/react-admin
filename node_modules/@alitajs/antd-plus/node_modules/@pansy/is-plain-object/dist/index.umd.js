(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.isPlainObject = factory());
}(this, (function () { 'use strict';

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  /**
   * 检查 `value` 是否是一个普通对象。
   *
   * @param value 要检查的值
   * @returns `value` 是普通对象返回 `true`，否则返回 `false`
   * @example
   * ```ts
   * isPlainObject({}) // => true
   * isPlainObject(Object.create(null)) // => true
   * isPlainObject(() => {}) // => false
   * ```
   */
  function isPlainObject(value) {
    if (_typeof(value) !== 'object' || value === null) return false;
    var proto = value;

    while (Object.getPrototypeOf(proto) !== null) {
      proto = Object.getPrototypeOf(proto);
    }

    return Object.getPrototypeOf(value) === proto;
  }

  return isPlainObject;

})));
//# sourceMappingURL=index.umd.js.map
