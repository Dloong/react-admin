{"version":3,"sources":["authorized/check-authority.js"],"names":["checkAuthority","policy","authority","result","multipleVerify","combinationVerify"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;;AAKO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD,EAASC,SAAT,EAAuB;AACjD,MAAIC,MAAM,GAAG,IAAb,CADiD,CAEjD;;AACA,MAAI,yBAAQD,SAAR,CAAJ,EAAwB;AACpB,QAAI,CAACD,MAAM,CAACG,cAAP,CAAsBF,SAAtB,CAAL,EAAuC;AACnCC,MAAAA,MAAM,GAAG,KAAT;AACH;AACJ,GAPgD,CAQjD;;;AACA,MAAI,0BAASD,SAAT,CAAJ,EAAyB;AACrB,QAAI,CAACD,MAAM,CAACI,iBAAP,CAAyBH,SAAzB,CAAL,EAA0C;AACtCC,MAAAA,MAAM,GAAG,KAAT;AACH;AACJ;;AACD,SAAOA,MAAP;AACH,CAfM","sourcesContent":["import Policy from '@pansy/policy';\nimport isArray from '@pansy/is-array';\nimport isString from '@pansy/is-string';\n/**\n * 权限检查方法\n * @param { 权限判定 | Permission judgment } authority\n * @param { 权限验证方法 | no pass components } policy\n */\nexport const checkAuthority = (policy, authority) => {\n    let result = true;\n    // 数组处理\n    if (isArray(authority)) {\n        if (!policy.multipleVerify(authority)) {\n            result = false;\n        }\n    }\n    // string 处理\n    if (isString(authority)) {\n        if (!policy.combinationVerify(authority)) {\n            result = false;\n        }\n    }\n    return result;\n};\nexport { Policy };\n"],"file":"check-authority.js"}